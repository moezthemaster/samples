export class EventManager {
    constructor(viewer) {
        this.viewer = viewer;
    }

    initializeEventListeners() {
        console.log('üîß Initialisation de tous les √©v√©nements');
        this.setupFileEvents();
        this.setupFilterEvents();
        this.setupExportEvents();
        this.setupActionEvents();
        this.setupModalEvents();
        this.setupComparisonEvents();
        console.log('‚úÖ Tous les √©v√©nements initialis√©s');
    }

    setupComparisonEvents() {
        console.log('üîß Configuration des √©v√©nements de comparaison');
        
        // √âv√©nements pour le toggle de mode
        const modeSingle = document.getElementById('modeSingle');
        const modeCompare = document.getElementById('modeCompare');
        
        console.log('üîç Boutons de mode trouv√©s:', {
            modeSingle: !!modeSingle,
            modeCompare: !!modeCompare
        });

        if (modeSingle) {
            modeSingle.addEventListener('click', () => {
                console.log('üìÅ Mode Simple cliqu√©');
                this.viewer.toggleMode('single');
            });
        }

        if (modeCompare) {
            modeCompare.addEventListener('click', () => {
                console.log('üîç Mode Comparaison cliqu√©');
                this.viewer.toggleMode('compare');
            });
        }

        // Configuration des zones de drop pour la comparaison
        this.setupComparisonDropZones();
        
        console.log('‚úÖ √âv√©nements de comparaison configur√©s');
    }

    setupComparisonDropZones() {
        console.log('üîß Configuration des zones de drop de comparaison');
        
        const dropLeft = document.getElementById('compareDropLeft');
        const dropRight = document.getElementById('compareDropRight');
        const fileInputLeft = document.querySelector('.compare-file-input[data-side="left"]');
        const fileInputRight = document.querySelector('.compare-file-input[data-side="right"]');
        const startCompare = document.getElementById('startCompare');

        console.log('üîç Zones de drop trouv√©es:', {
            dropLeft: !!dropLeft,
            dropRight: !!dropRight,
            fileInputLeft: !!fileInputLeft,
            fileInputRight: !!fileInputRight,
            startCompare: !!startCompare
        });

        if (dropLeft && fileInputLeft) {
            this.setupSingleDropZone(dropLeft, fileInputLeft, 'left');
        }

        if (dropRight && fileInputRight) {
            this.setupSingleDropZone(dropRight, fileInputRight, 'right');
        }

        if (startCompare) {
            startCompare.addEventListener('click', () => {
                console.log('üöÄ Lancement de la comparaison');
                this.viewer.startComparison();
            });
        }
    }

    setupSingleDropZone(dropZone, fileInput, side) {
        // Clic pour s√©lectionner un fichier
        dropZone.addEventListener('click', () => {
            console.log(`üñ±Ô∏è Zone ${side} cliqu√©e`);
            fileInput.click();
        });

        // Gestion de la s√©lection de fichier
        fileInput.addEventListener('change', (e) => {
            if (e.target.files.length > 0) {
                console.log(`üìÅ Fichier s√©lectionn√© pour ${side}:`, e.target.files[0].name);
                this.viewer.handleCompareFileSelect(side, e.target.files[0]);
            }
        });

        // Drag and drop
        dropZone.addEventListener('dragover', (e) => {
            e.preventDefault();
            dropZone.classList.add('active');
            console.log(`üì¶ Drag over zone ${side}`);
        });

        dropZone.addEventListener('dragleave', () => {
            dropZone.classList.remove('active');
            console.log(`üì¶ Drag leave zone ${side}`);
        });

        dropZone.addEventListener('drop', (e) => {
            e.preventDefault();
            dropZone.classList.remove('active');
            
            if (e.dataTransfer.files.length > 0) {
                const file = e.dataTransfer.files[0];
                console.log(`üì¶ Fichier d√©pos√© dans zone ${side}:`, file.name);
                
                if (file.name.endsWith('.jil') || file.name.endsWith('.txt')) {
                    this.viewer.handleCompareFileSelect(side, file);
                } else {
                    alert('Veuillez s√©lectionner un fichier .jil ou .txt');
                }
            }
        });
    }

    setupFileEvents() {
        console.log('üîß Configuration des √©v√©nements de fichier');
        
        const fileInput = document.getElementById('fileInput');
        const browseBtn = document.getElementById('browseBtn');
        const uploadArea = document.getElementById('uploadArea');

        console.log('üîç √âl√©ments de fichier trouv√©s:', {
            fileInput: !!fileInput,
            browseBtn: !!browseBtn,
            uploadArea: !!uploadArea
        });

        if (browseBtn && fileInput) {
            browseBtn.addEventListener('click', () => {
                console.log('üìÅ Bouton Parcourir cliqu√©');
                fileInput.click();
            });
        }

        if (fileInput) {
            fileInput.addEventListener('change', (e) => {
                console.log('üìÅ Fichier s√©lectionn√© via input');
                this.viewer.handleFileSelect(e);
            });
        }

        // Drag and drop pour le mode simple
        if (uploadArea) {
            uploadArea.addEventListener('dragover', (e) => {
                e.preventDefault();
                uploadArea.classList.add('drag-over');
                console.log('üì¶ Drag over zone upload principale');
            });

            uploadArea.addEventListener('dragleave', () => {
                uploadArea.classList.remove('drag-over');
                console.log('üì¶ Drag leave zone upload principale');
            });

            uploadArea.addEventListener('drop', (e) => {
                e.preventDefault();
                uploadArea.classList.remove('drag-over');
                console.log('üì¶ Fichier d√©pos√© dans zone upload principale');
                
                if (e.dataTransfer.files.length > 0) {
                    fileInput.files = e.dataTransfer.files;
                    this.viewer.handleFileSelect({ target: { files: e.dataTransfer.files } });
                }
            });
        }
    }

    setupFilterEvents() {
        console.log('üîß Configuration des √©v√©nements de filtre');
        
        const searchFilter = document.getElementById('searchFilter');
        
        if (searchFilter) {
            searchFilter.addEventListener('input', () => {
                console.log('üîç Filtre de recherche modifi√©:', searchFilter.value);
                this.viewer.applyFilters();
            });
        }
    }

    setupExportEvents() {
        console.log('üîß Configuration des √©v√©nements d\'export');
        
        const exportPNG = document.getElementById('exportPNG');
        const exportPDF = document.getElementById('exportPDF');
        const exportHTML = document.getElementById('exportHTML');

        console.log('üîç Boutons d\'export trouv√©s:', {
            exportPNG: !!exportPNG,
            exportPDF: !!exportPDF,
            exportHTML: !!exportHTML
        });

        if (exportPNG) {
            exportPNG.addEventListener('click', () => {
                console.log('üì∏ Export PNG demand√©');
                this.viewer.exportToPNG();
            });
        }

        if (exportPDF) {
            exportPDF.addEventListener('click', () => {
                console.log('üìÑ Export PDF demand√©');
                this.viewer.exportToPDF();
            });
        }

        if (exportHTML) {
            exportHTML.addEventListener('click', () => {
                console.log('üåê Export HTML demand√©');
                this.viewer.exportToHTML();
            });
        }
    }

    setupActionEvents() {
        console.log('üîß Configuration des √©v√©nements d\'action');
        
        const expandAll = document.getElementById('expandAll');
        const collapseAll = document.getElementById('collapseAll');
        const resetView = document.getElementById('resetView');

        console.log('üîç Boutons d\'action trouv√©s:', {
            expandAll: !!expandAll,
            collapseAll: !!collapseAll,
            resetView: !!resetView
        });

        if (expandAll) {
            expandAll.addEventListener('click', () => {
                console.log('üìà Expand All demand√©');
                this.viewer.expandAll();
            });
        }

        if (collapseAll) {
            collapseAll.addEventListener('click', () => {
                console.log('üìâ Collapse All demand√©');
                this.viewer.collapseAll();
            });
        }

        if (resetView) {
            resetView.addEventListener('click', () => {
                console.log('üîÑ Reset View demand√©');
                this.viewer.resetView();
            });
        }
    }

    setupModalEvents() {
        console.log('üîß Configuration des √©v√©nements de modal');
        
        const aboutBtn = document.getElementById('aboutBtn');
        const aboutModal = document.getElementById('aboutModal');
        const closeAboutModal = document.getElementById('closeAboutModal');

        console.log('üîç √âl√©ments de modal trouv√©s:', {
            aboutBtn: !!aboutBtn,
            aboutModal: !!aboutModal,
            closeAboutModal: !!closeAboutModal
        });

        if (aboutBtn) {
            aboutBtn.addEventListener('click', () => {
                console.log('‚ÑπÔ∏è Bouton √Ä propos cliqu√©');
                this.viewer.showAboutModal();
            });
        }

        if (closeAboutModal) {
            closeAboutModal.addEventListener('click', () => {
                console.log('‚ùå Fermeture modal √Ä propos');
                this.viewer.hideAboutModal();
            });
        }

        // Fermer la modal en cliquant √† l'ext√©rieur
        if (aboutModal) {
            aboutModal.addEventListener('click', (e) => {
                if (e.target === aboutModal) {
                    console.log('üéØ Clic √† l\'ext√©rieur de la modal');
                    this.viewer.hideAboutModal();
                }
            });
        }
    }

    setupDragAndDrop() {
        console.log('üîß Configuration du drag and drop');
        // Cette m√©thode est d√©j√† impl√©ment√©e dans setupFileEvents et setupComparisonEvents
        console.log('‚úÖ Drag and drop d√©j√† configur√© dans les m√©thodes sp√©cifiques');
    }
}